# KSP AutoLoc
#
# This script is meant to replace boring manual text replacement tasks
# for implementing localization to non-localized-yet part mods in KSP 1.3+
#
# Beware, it does not use KSP API for clean node processing, so it may produce errors.
# Beware, it definitely WILL produce errors if you have:
# 1) Any .cfg files with MORE THAN ONE PART in them.
# 2) More than one single agency in /Agencies/Agents.cfg
#
# Also it will NOT localize ModuleManager patches, GUI commands or science definitions - you should do them manually.

import sys
import os
agency = False
ver = '0.3'

# Fail function
def kaput(p):
    print p
    try:
        input("Press enter to continue")
    except SyntaxError:
        pass
    sys.exit(0)
        
# Line replacer function
def ReplaceLineInFile(fileName, sourceText, replaceText):
    file = open(fileName, 'r')
    text = file.read()
    file.close()
    file = open(fileName, 'w')
    file.write(text.replace(sourceText, replaceText, 1))
    file.close()

# Check-if-cfg-is-part-cfg function
def filecheck(ff,ss):
    if os.path.isfile(ff):
        fh = open(ff)
        for line in fh:
            if line.startswith(ss):
                fh.close()
                return 1
        fh.close()
    return 0

# CFG reader function
def cfgread(ff):
    cr = ['','','','','','','','']
    with open(ff) as fh:
        for line in fh:
            if 'name' in line:
                if not cr[0]:
                    cr[0] = line.rpartition('=')[2].strip()
            elif 'title' in line:
                if not cr[1]:
                    cr[1] = line.rpartition('=')[2].strip()
                    cr[3]=line
            elif 'description' in line:
                if not cr[2]:
                    cr[2] = line.rpartition('=')[2].strip()
                    cr[4]=line
            elif 'manufacturer' in line:
                if not cr[5]:
                    cr[5]=line
            elif 'tags' in line and process_tags:
                if not cr[6]:
                    cr[6] = line.rpartition('=')[2].strip()
                    cr[7]=line
    return(cr)

# Yes/no dialog function

def question(q, default=True):
    valid = {"yes":True, "y":True, "no":False, "n":False}
    if default == None:
        prompt = " [y/n] "
    elif default == False:
        prompt = " [y/N] "
    else: 
        prompt = " [Y/n] "
    
    while True:
        choice = raw_input(q + prompt).lower()
        if default != None and choice == '':
            return default
        elif choice in valid:
            return valid[choice]
        else:
            print('Please, enter "yes", "no", "y" or "n").')


print('***  KSP Automatic Localizer '+ver+' ***\n')	
	
# Aquiring mod folder from command line parameter
if len(sys.argv)>1:
    pdir = sys.argv[1]
else:
    kaput('You are supposed to supply a path to mod folder as a command line parameter.')

if not os.path.isdir(pdir):
    kaput('Your input was: '+pdir+'.\nIt is vot a valid folder.\nYou are supposed to supply a path to mod folder as a command line parameter.')
 
# Reading mod name (equals to folder name as in CKAN and ModManager)
modname = pdir.rpartition("\\")[2]
print ('Processing the '+modname+' mod...')
l = len(pdir)+1
pstring = ''

# Ensurement
if not question('\nYour mod file will be overwrtitten in process. Do you want to continue?'): kaput('Execution terminated.')

# Ask for tags

process_tags = question('\nMost mods have part tags that are badly designed and thus are not very useful.\nThough they still take a lot of effort from translators...\n Do you want me to serach for part tags and process them anyway?',False)

# Localization checks

if not os.path.isdir(pdir+'\Localization'):
    print('Localization folder not found. Creating!')
    os.makedirs(pdir+'\Localization')

# Check if basic en-us localization is there already.
# Repetitive execution while having that file will definitely ruin the strings, so we'll stop instead.
if os.path.isfile(pdir+'\Localization\en-us.cfg'):
    kaput('Localization file already exists! Stopping execution to prevent string damage!')

else:
    print('Localization file not found. Creating!')

# Start writing en-us.cfg	
floc = open(pdir+'\Localization\en-us.cfg','w+')
floc.write('Localization\n{\t//This file was automatically generated by KSP AutoLoc '+ver+' (https://github.com/doktorjet/KSP_Mod_Localizer)\nen-us\n{\n')

# Check if we have an agency. If we do, we'll treat it as the only one!
# And will also use it's title for all parts 'manufacturer' property.

if filecheck(pdir+'\Agencies\Agents.cfg','AGENT'):
    cfg = cfgread(pdir+'\Agencies\Agents.cfg')
    if not question('\nCurrent version of AutoLoc does not support multiple agencies.\nFirst agency found will be used for ALL parts as their default manufacturer.\nDo you want to continue?',True): kaput('Execution terminated.')
    agency = True
    if (cfg[0] and not cfg[1]):
        print ('Found an agency, but it does not have a title, which is a severe bug.\nFixing agency by assigning a title equal to it\'s name: '+cfg[0]+'.')
        cfg[1] = cfg[0]
        ReplaceLineInFile(pdir+'\Agencies\Agents.cfg',cfg[4],'\ttitle = #LOC_'+modname+'_Agency_title\n\tdescription = #LOC_'+modname+'_Agency_desc\n')
        floc.write('// Agencies\n\n#LOC_'+modname+'_Agency_title = '+cfg[1]+'\n#LOC_'+modname+'_Agency_desc = '+cfg[2]+'\n')
        try:
            input("Press enter to continue")
        except SyntaxError:
            pass
    elif (not cfg[0] or not cfg[2]):
        print('Found an agency, but it\'s config is corrupted. It must have at least name and description. Skipping.')
        try:
            input("Press enter to continue")
        except SyntaxError:
            pass
    else:
        print ('Found an agency, named "'+cfg[1]+'". Using it as the one and only part manufacturer for all mod parts.')
        ReplaceLineInFile(pdir+'\Agencies\Agents.cfg',cfg[3],'\ttitle = #LOC_'+modname+'_Agency_title\n')
        ReplaceLineInFile(pdir+'\Agencies\Agents.cfg',cfg[4],'\tdescription = #LOC_'+modname+'_Agency_desc\n')
        floc.write('// Agencies\n\n#LOC_'+modname+'_Agency_title = '+cfg[1]+'\n#LOC_'+modname+'_Agency_desc = '+cfg[2]+'\n')
        try:
            input("Press enter to continue")
        except SyntaxError:
            pass
        
# Looking through the subfolders, searching for part CFGs and writing #LOCs.

for path, dirs, files in os.walk(pdir):
   for fname in files:
       if fname.endswith('cfg'):
           if filecheck(path+'\\'+fname,'PART'):
               if pstring != path[l:]:
                   pstring = path[l:]
                   print ('Processing '+pstring+' folder...')
                   floc.write('\n// '+pstring+'\n\n')
               cfg = cfgread(path+'\\'+fname)
               floc.write('#LOC_'+modname+'_'+cfg[0]+'_title = '+cfg[1]+'\n')
               floc.write('#LOC_'+modname+'_'+cfg[0]+'_desc = '+cfg[2]+'\n')
               ReplaceLineInFile(path+'\\'+fname,cfg[3],'title\t\t\t= #LOC_'+modname+'_'+cfg[0]+'_title\n')
               ReplaceLineInFile(path+'\\'+fname,cfg[4],'description\t\t= #LOC_'+modname+'_'+cfg[0]+'_desc\n')
               if process_tags and cfg[7] != '':
                   floc.write('#LOC_'+modname+'_'+cfg[0]+'_tags = '+cfg[6]+'\n')
                   ReplaceLineInFile(path+'\\'+fname,cfg[7],'description\t\t= #LOC_'+modname+'_'+cfg[0]+'_desc\n')
               floc.write('\n')
               if agency:
                   ReplaceLineInFile(path+'\\'+fname,cfg[5],'manufacturer\t= #LOC_'+modname+'_Agency_title\n')
# Close en-us.cfg, we're done with it.
floc.write('}\n}')
floc.close()
kaput('\nWe are done here! Check your newly localized mod for bugs!')
